 计算机科学技术专业毕设和论文的问答
 国家教育部在2022年开始加强了对本科生毕业论文的管理，不仅要求论文通过知网查重审核，也对所有论文采用了挂网盲审的方式，并安排专家随机抽查。
 为了让三年级本科生尽早进入写论文的状态，特编写本程序，发布我与学生在交流毕业设计/论文的对话，整理成为文本，预计1万字左右，供广大学生消化后使用！
1. 毕业论文（设计）的目的和意义
 在此我引用导师对毕业论文（设计）的目标要求：“要求学生综合运用本科阶段学习的计算机科学技术知识，尤其是程序设计和软件工程领域学习的方法、训练的代码能力，架构自己感兴趣的技术路线，结合自己探求的问题形成软件需求，然后有条理第系统落实分析问题、建立模型、软件设计、系统实施、测试调试的等传统软件工程的全部的流程。践行毕业设计，总结开发文档撰写论文，践行二者的有机结合，从而在实践和理论二个维度训练学生专业的计算思维和工程思维。”
1.1 明确毕业论文和毕业设计的关系
 学校通用的毕业论文（设计）管理手册，手册上的表述是“毕业论文（设计）” ，从字面上看是以毕业论文为主，毕业设计作品没有做硬性要求。而我认为这对于以软件开发为方向的毕设模式描述不太准确，因为我们一般是先要做出毕设软件，然后才可总结写出毕业论文。
 为明确本专业的毕设和论文的关系，我们把“毕业论文（设计）”的文字表述，明确改为“毕业设计/论文”的文字，这种定义明确了论文的前提是设计（也即学生开发的软件作品），而设计的文档总结和理论提升则成为了论文，下文我们都采用这样的“毕业设计/论文”方式的表述。
 另外，在计算机专业软件开发的毕业论文中，可以插入截图配合文本，以演示软件的效果证明真实性，还可以在论文中直接提供网址（甚至二维码），让阅读者可以访问和使用毕设作品。用这种方式既可以证明论文的文字阐述的可信度，这也应该是本专业论文的特色，我想纯粹依靠文本表述的论文很难有这个优势。
1.2 对毕业设计/论文内涵和意义理解
 我们作为计算机科学技术专业的本科生，在即将完成学业之际，的确很必要设计开发一个本专业的作品，来回顾总结本学科专业学习的知识系统，梳理课程体系最核心的东西，体现我们的真实能力。
 在我的毕业设计中，涉及的有关核心课程的理论包括：面向对象的程序设计语言、数据结构和算法、操作系统、软件工程等。以前这些核心课程供理论指导感觉非常抽象，加之基本上以理论知识为主，因此学完后我们感觉一直有所缺憾，本人与导师沟通后也一致认为，若能在实践层面应用这些核心课程的关键知识，则必然会在理解和技术二个维度提升自己的专业性。
 因此，我认为毕业设计的内涵就是大学理论的学习在实践层面做一次综合演练和总结，期间也需要要配合学习当前最新的一些流行技术，在以形成自己对计算机软硬件体系的系统而专业的理解后，再总结撰写毕业论文，这既是毕业论文的内涵。
 深刻理解计算机系统（computing system）对我们专业开发者而言，是非常重要的，这也是我们即将成为建设国家现代化的工程师不同于与其他专业的人的特色，从其他专业眼中看来，我们是计算机专业的，我们对计算机系统的理解一定不是浮于表面的，而是尽量要更加接近计算机的本质，对任何技术的理解则是能接近技术的底层和基本原理。
1.3 毕业设计/论文和个人专业成长关系
 毕业设计/论文是本科教育的重要环节，其综合性和个性化都很强，对提升本科生的各项能力意义很大。我们可以从个人成长的高度和意义来做好这个环节的方方面面，为了具有时代感，我结合国家实现中国式现代化的目标来写，从教育人才的高度来理解教育部和学校的这项规划。还是引用导师李教授的观点：毕设任务开始后，本科生要尽早从自身需要出发主动规划，让设计/论文成为自己主动学习和自我教育的最后一战。围绕本专业的目标，选择好自己的方向和技术路线，在导师的指导下，成长为本专业的“四有人才”：1、具有现代工程思维的工程师；2、掌握现代数字工具的人；3、具有国际视野能自主学习的学习者；4、兼具人文情怀全面发展的人。第1，2点素质主要支撑毕设的开发，而第3，4点主要支撑论文协作，写到这里，也许是我更能明白本科生为什么要经历查资料、写论文、开组会、答辩了。
 我想此次毕业之作（设计/论文）任重道远，如何积极地甚至愉快地走完这条漫长而兼具不确定性的征途？ 我思考这个问题良久，得出结论：为了少走弯路，亲手实践（构建代码），广泛阅读（文献文档查阅），乐于总结（撰写文档）是正确走好这段路程的行为范式。任何事情其付出和回报是对等的，坚持这个行为范式，日积月累，我们必须成长起来！
 希望通过这一年的学习研究，我或能开启教授常提到的本专业的计算思维和代码能力，也体验到个人能力成长的快乐。
2. 毕业设计/论文的路线规划和研究方法
 磨刀不误砍柴功，要落实好做毕业设计、写通毕业论文，做好规划和选择技术路线是这项系统工程的顶层设计，本节从路径规划、技术路线、研究方法分别阐述和分析。
2.1 实现目标的路径规划
 我的毕设分为二个阶段实现：首先选择一条自己感兴趣的技术实践路线，把核心的技术加以整合学习，学习导师的案例，理解好宏观的技术之间的关系和分别在项目中的分工。更重要的是不断提升自己的写高质量的代码能力。通过项目把实践和理论打通后，就可进入第二个阶段，结合自己感兴趣的问题，定义问题分析需求，初步设计适合自己技术能力和资源的解决方案，此时也可着手写代码为方案探探路，当然大部分工作还是构建代码体系和落实软件的具体实施细节。写代码和部署实施和方案设计的优化其实是交替进行的，前者是落实微观层面具体实现，而后者则是保证不偏离宏观层面基本设计。期间可以写下大量开发文档，最后毕设的实践和文档基础上做一个总结，结合有关计算和软件的理论的之下形成自己论文，进而加深对前这几年学习的理论真实体会，从实践升华到理论，再用理论实现最佳实践！
2.2 毕设的技术路线规划
 所谓技术路线特指从事理工科的人们理性的计划，强调逻辑性和技术性，常用来来规划实际的工程项目或研究项目。
2.2.1 抬头看路，大方向的选择
计算机科学与技术研究的内容非常丰富，可以说是一个大学科，包含许多专业，我从本科的课程体系总结。以我有限的时间和能力，如果没有做好具体技术路线选择，就可能会在自己不懂或不感兴趣的浩瀚技术海洋中被逐渐消磨学习热情，事倍功半。方向的选择就如人生选择那样重要。我大致把CS专业的方向大致分了三种：一是研究计算机硬件体系的架构，这种方向底层接近微电子数字电路和芯片研究，本科阶段还可以从嵌入式软件硬件开发角度学习，这对学习资源的要求较高，我虽有兴趣，但无此特长和条件。二是研究系统软件的体系和架构和管理，这种方向需要深入操作系统的体系架构和网络，我对此也很有兴趣，但或许由于社会需求对此并不太大，所以在这个方向，我仅作必要的学习和理解。三则是我选择的研究应用软件的开发方向，这不仅是因为国家和社会方方面面的对此类各层次的人才的需求非常大，也是因为我理解自己本人作为一般的本科生，水平和经验有限，更喜欢研究具体的问题，也更愿意从发现问题、分析问题再到解决问题，这个相对直观的思维来学习和实践。
不管是哪个方向，写文档还是要从发现问题，到分析问题再到解决问题这个思路来写，在实践中却不能盲从这个思路，本专业的学生应该把大部分时间和精力落实到学习和应用技术上来，确切的说需要整合多项技术和技能，基于自己的代码能力来寻找问题进而分析和分解解题。对普通学生而言，由于抽象能力和逻辑能力还刚刚建立不久，切记不能随心所欲理想地去追踪社会热点问题，也不能分析问题时脱离自己的技术能力。主要是学会立足自己当下的能力，做好规划，选择自己可以做好的项目，在实践中不断提升能力，同时在实践中应用好本方向的核心课程一些基础理论和方法，总结出来的论文才会有一定的深度。
2.2.2 Web应用开发的技术路线
我选择了应用软件开发的方向，但其内涵还是非常丰富也是非常庞杂的，就比如说用于写代码的高级计算机语言，常见的就不下十几种，而且几乎每种都是博大精深且独具自己特色的，他们在各个领域都有一席之地，有的专攻Android手机平台、有的专门支持苹果的IOS平台、还有的仅仅适用于window桌面系统，当然还有一些科研院所大型机构在使用UNIX/Linux平台。通用的计算机系统的操作系统如此复杂，加上现代计算机的外观又如此多样化（比如我们现在的移动端设备），我们提出的第一个问题就是：软件能否做到跨硬件跨平台？我们都承认人的时间是最珍贵的，开发者能否写一套代码，就可以直接在所有的硬件和操作系统上运行？当然不是我第一个提出这个问题的，改变互联网世界的Web标准，一直在致力于实现这个伟大而光荣的理想。Web之父（Tim）在发明Web的基本技术架构以后，成立了W3C组织，该组织在2010年后推出的HTML5国际标准，结合欧洲ECMA组织维护的ECMAScript国际标准，已经实现了开发者的这个理想，这也是我所谓的Web应用开发的技术路线。
2.2.2 支撑技术路线的内功
有了标准，效果却因人而不同，开发者的内功还是体现在高质量的代码能力上，我简单地可以理解践行这条技术路线，其实就是打造修炼我的高质量代码能力之路，分三个层次：
一是对计算机硬件和操作系统的理解和运用能力，我们写的代码本质上都会是运行在操作系统之上，而操作系统又直接对接硬件，在不影响开发效率前提下，让自己的代码架构在偏底层，则会更好地锻炼我们的对系统的掌控能力，提升应用软件的性能，减小消耗，也越可能使自己的代码为他人所用。Web应用（Web Application）由于基于HTML5国际标准，自2009年谷歌开源其V8引擎以来，现代现代浏览器纷纷学习演化，具有跨平台特性和极高性能，已经广泛地存在于移动互联网时代的各类设备之中，从Web应用的开发者角度看，现代操作系统其实就是操作系统的延申，我们也见证了这十几年Web为应用软件插上了腾飞的翅膀。
为了简单起见，我们可以把互联网看作一个更大平台计算系统，Web应用为互联网而生，因此这条技术路线让我的毕业设计可以很方便对接互联网络，当然也可极低成本在互联网上运行（完全可以包含在我的上网的网费里），不受时空限制，这是软件开发其他方向没法对比的。
二是面向对象（OOP）计算机语言的运用和构建代码的能力。几乎所有的现代计算机语言都是OOP语言，Web应用（Web Application）方向的程序设计语言则是流行的JavaScript，其国际标准则是著名的ECMAScript，其强大和简洁的OOP能力极具表达力，加上其函数式（Functional）编程的特性，让我们稍加学习，就可以对Web应用的异步事件处理写出符合自己思路的程序来，解决异步响应问题让我有很强的满足感，因此选择这个语言对普通开发者非常友好。另外，HTML和CSS也是本次毕设开发要用到的较为次要的语言，我更多是综合这三个语言，在几个层面践行MVC设计模式，体验了伟大的W3C前辈们努力推行的HTML5平台的开发思想，比如用HTML用于建立应用的模型（Model），用CSS设计应用的外观渲染层（View），用JS开发应用的控制行为层（Controller），当深入JS面向对象开发之后，为组织代码的更精细和微观的MVC模式也需要多次运用。
三是对软件工程的理解和软件开发过程和版本的控制能力。近些年国家层面加大了一些大工程规划建设，我突然感觉“工程”二字变得高尚神圣起来，本专业虽然也有一门软件工程的课，但似乎由于本科生学得太早，无法理解成年人跨界合作的世界，因此感觉还没有领悟到工程的要义。而本次毕设选择Web方向，其原生的开源理念，配合上Git这个现代版本管理工具，不仅让我们的代码有了自由的意义，也为大的程序增加了时间的维度的控制，配合Github的远程代码仓库的分享后，自此代码不再是一个个人的事，工程的内涵二字才变得生动而有意义。
在毕设的后半个阶段和论文的编写中，我们运用传统的软件工程的ADIT（Analysis、Design、Implementation、Testing）开发模式（其实也是多人合作的管理）才不至于流于形式，尤其是在我们引入和运用现代开源思想下诞生的Git工具后，因为可以便捷分享和学习他人的优秀代码，软件开发写代码转变成为人和人之间的学习、人与人之间的合作，软件工程的原则和代码规范对低年级本科生就像一堆空洞的文字堆砌，在毕设后也变得鲜活起来。
这条毕业设计/论文之路和技术路线看似艰难，但我发现在学习完成几个技术后，不但我对自己代码能力和计算机底层的理解更加自信，而且我感觉对宏观需求问题看得更加清楚了，还发分析问题能力也比之前高了不少，这也说明普通本科生在技术还较弱时，不要急于照搬书本，先忙于分析问题和需求，而是在毕业设计中首先要完善技术的学习，规划好比较具体的技术路线。
2.3 研究方法
我遗憾地发现有一些人在自己的领域学了十几年，却可能还没有意识到自己学习方法不对，导致事倍功半！其实不管是在哪个领域学习研究，其学习方法很多是相通的，方法可以互相借鉴的。
我们可以拿学习方法来类比研究方法，普通本科生一般对研究方法感觉比较抽象，其实不管我们研究什么领域，研究方法也是相通的，下面阐述对本专业的研究方法的浅显的理解。
2.3.1 文献法
在和导师沟通后，我对文献法的理解可以用一句话表达，即：“利用前人的文字深入学习总结和研究本领域的知识和技术的方法”，对于我们Web应用方向的学子而言，在自己代码能力成长的任何阶段，我们无法离开文献法，然而承载知识的媒体形式非常丰富，包括：书籍、在线文档、社区论坛、期刊、会议报告等等，我的毕业设计的Web应用技术方向的资料来源有下面几类：
一是被中国IT领域诙谐地取名为“衣冠禽兽”：“ O’Reilly Media ”、“ Manning Publications”，这二大著名的出版集团出版了大量经典计算机科学技术书籍，全球开发者也把有大量自己私藏的这类书籍以电子文件的形式，广泛地发布在互联网络的各个开发者社区，有些书籍对我这个穷学生而言真是价值不菲，当然这些书全部都是英文原版，在这个知识开源的时代，我想原书作者也应该能原谅一个发展中国家的普通本科生免费看他的书吧，记得鲁迅笔下的孔乙己说“窃书不能算偷，哎，读书人的事……”；
二是在线文档和社区论坛的文章，主要是W3C国际组织的Web标准和Mozilla基金会的MDN文档网站，二者分别站在科学家和工程师的二个层次，都有二十多年的积累和知识沉淀，他们在线上发表了大量公开文档，描绘了Web的过去、现在、将来。W3C主要以Web国际标准和最佳实践为主，而MDN则偏向Web的最佳实践和各从层面应用的教学和讨论；
三是则国人用得最多的知网平台，在这里主要可以学习写论文的规范、了解我选择的毕设选题他人在理论上的研究和探索，对本科生而言可提供理论的指导和展示学术的规范，但对于梦想成为开发者的本科生而言，这些文章对于我们毕设的软件开发能力（高质量代码能力）的意义不大，但对毕业论文还是很有参考价值的。当然，文字材料还有其他的来源，在线信息如此丰富，也是因为我们的Web技术广泛而又深刻地应用在Internet上，让知识可以跨越国界、跨越种族、跨越阶层，感谢开创和应用Web的前辈们把人们带向光明，在此就不一一枚举了。
2.3.2 模型研究法
对于写代码的本科生，必须擅长使用的另一种研究方法就是“模型研究法”。这个研究方法非常具体，也很有意思，其给人的快乐甚至可以与打游戏对比。比如承载我们Web应用的台式机、笔记本、手机、平板，传递在线信息要用到的互联网、服务器，沟通硬件和我们的代码之间的操作系统、浏览器、代码编辑器、编译器，这些软硬件对象，对我们而言，都值得从写代码的角度去研究，我们笼统地称它们为对象，这些对象最终会在我们大脑中就会被理解为抽象的模型，我们再通过分析把这些模型程序化、数据化，最后写出代码来，这种行为本质上就是先在思维上“建模”，再用OOP语言表述出来。
在OOP分析和开发过程中，我在毕设中试图解决的问题，也被定义成为了各级各种模型。模型研究只是更为抽象，与具体的计算机语言无关，在毕设中我也尝试使用国际标准UML（Unified Modeling Language）语言来建立抽象模型。我感觉采用UML模型研究法和面向对象的程序设计方法的目标是一致的，只是在不同层面分析表述问题而已。因此采用模型研究法，对我的毕设而言就是用UML对问题建模，当然这比较抽象，做好有一定难度，而使用OOP程序对画好的模型开展程序设计则更为具体直观，通过熟悉的OOP语言和代码运行环境运行和调试模型，我们甚至可以倒推出模型设计的问题和缺陷。我个人的观点是对于本科生而言，可能直接写代码建立模型研究模型，代码跑通后，再利用UML语言绘制模型，作为代码的文档资料则更合理。毕竟本科生在思维上还很稚嫩，无法比拟高级程序员乃至系统架构师那样的抽象能力和丰富的经验。
2.3.3 其他会误解的研究方法
有些同学还可能会用到案例法，顾名思义以调查研究具体案例为主，这种研究方法对于管理类专业很合适，或许软件的产品经理方向可以深入调研一个软件产品，而使用这种方法。但案例法对计算机的软件开发方向，又是且以技术为主选题不太合适，
还有些同学会想到实验法，认为我们要做程序运行或软件的实验，其实这是一种误解，实验法一般是指医学类科研，用来对比不同的实验数据和对象的研究方法，我们的程序和代码其实是模拟现实世界某些对象的模型。
最后所谓的实践法也不存在，实践不是研究方法，实践是针对理论和验证理论的行为，我们所有的计算科学和计算技术的应用都必须落实到实践中来，在实践中才能验证我们写的代码或构建的系统是否有效？是否高效？当然，计算科学家对有关理论和数学的纯粹研究不需要实践。